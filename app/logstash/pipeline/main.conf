input {
  http_poller {
    urls => {
      url1 => {
        method => get
        url => "http://localhost:8081/api/events"
        headers => {
          "Authorization" => "Basic dXNlcjpwYXNz"
        }
      }
    }
    request_timeout => 60
    schedule => { every => "5s" }
    codec => "json"
  }
}
filter {

  if "endpoint.new" in [tag] {
    ruby {
      code => '
        event.set("ipv4", event.get("[data][ipv4]")) if event.get("[data][ipv4]")
        event.set("mac", event.get("[data][mac]")) if event.get("[data][mac]")
      '
    }
  }

   mutate {
     rename => {
      "[data][ipv4]" => "ipv4"
      "[data][mac]" => "mac"
    }
      remove_field => ["@version", "host", "path", "tags", "http_request_failure","Level"]
    }

    ruby {
      code => "
        event.set('data', event.get('data').to_json)
        event.set('@timestamp', LogStash::Timestamp.new(event.get('time')))
        # event.set('[@metadata][id]', Digest::SHA256.hexdigest(event.get('data').to_json + event.get('time')))
        event.set('[@metadata][id]', Digest::SHA256.hexdigest(event.get('@timestamp').to_s))
      "
    }
    
    fingerprint {
      source => "@timestamp"
      target => "[@metadata][fingerprint]"
      method => "SHA256"
    }

  }


output {
  # Exemple: Envoi des données traitées vers Elasticsearch
  elasticsearch {
    hosts => ["http://localhost:9200"]
    index => "logs-generic-default"
    document_id => "%{[@metadata][fingerprint]}"
    action => "create"
    user => "elastic"
    password => "P@55aran"
  }
  # Exemple: Sortie des données traitées vers la console
  #stdout { codec => rubydebug }
}
